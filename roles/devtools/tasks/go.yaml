---
- name: Check if Go is installed
  ansible.builtin.stat:
    path: /usr/local/go/bin/go
  register: go_check_install

- name: Check Go version
  ansible.builtin.command:
    cmd: /usr/local/go/bin/go version
  register: go_check_version
  when:
    - go_check_install.stat.exists is defined
    - go_check_install.stat.exists
  changed_when: go_version not in go_check_version.stdout

- name: Set Go install and update state to False
  ansible.builtin.set_fact:
    go_installed: false
    go_up2date: false

- name: Set Go install state to True
  ansible.builtin.set_fact:
    go_installed: true
  when:
    - go_check_install.stat.exists is defined
    - go_check_install.stat.exists
    
- name: Set Go update state to True
  ansible.builtin.set_fact:
    go_up2date: true
  when:
    - go_check_version is defined
    - go_version in go_check_version.stdout

- name: Download Go
  ansible.builtin.get_url:
    url: "{{ go_url }}"
    dest: "/tmp"
  delegate_to: localhost
  when: (go_installed and not go_up2date) or
        (not go_installed)

- name: Remove previous version of Go
  ansible.builtin.file:
    path: /usr/local/go
    state: absent
  become: yes
  when: (go_installed and not go_up2date) or
        (not go_installed)

- name: Install Go
  ansible.builtin.unarchive:
    src: "/tmp/{{ go_version }}.linux-amd64.tar.gz"
    dest: /usr/local
  become: yes
  when: (go_installed and not go_up2date) or
        (not go_installed)

- name: Setting Go environment
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: "{{ item }}"
  loop:
    - "export GOPATH={{ xdg_data_home }}/go"
    - "export GOBIN=$GOPATH/bin"
    - "export PATH=$GOBIN:/usr/local/go/bin:$PATH"
